generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  username      String         @unique
  email         String?        @unique
  avatar        String?
  name          String?
  biography     String?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  password      String
  token         String?
  sounds_folder Sound_folder[]
  keys          Key[]
  keyboards     Keyboard[]
  records       Record[]
  sounds        Sound[]
  user_info     User_info?
  Category      Category[]
}

model Keyboard {
  id                  Int              @id @default(autoincrement())
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  name                String
  description         String?
  private             Boolean          @default(false)
  max_keys            Int              @default(25)
  keys                Key[]
  records             Record[]
  categories          Category[]       @relation("CategoryToKeyboard")
  user                User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId              Int
  design_keyboard     Design_keyboard? @relation(fields: [design_keyboardName], references: [name])
  design_keyboardName String?
  effects             Effect[]
}

model Key {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  order       Int        @default(999)
  key         String
  displayName String
  bgColor     String?
  keyColor    String?
  userId      Int
  soundId     Int?
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  keyboard    Keyboard[]
  sound       Sound?     @relation(fields: [soundId], references: [id])
  categories  Category[] @relation("CategoryToKey")
  effects     Effect[]
}

model Sound {
  id             Int          @id @default(autoincrement())
  name           String
  path           String
  userId         Int
  size           Float        @default(0)
  keys           Key[]
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categories     Category[]   @relation("CategoryToSound")
  Sound_folder   Sound_folder @relation(fields: [sound_folderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sound_folderId Int
}

model Sound_folder {
  id         Int     @id @default(autoincrement())
  name       String
  is_default Boolean @default(false)
  sounds     Sound[]
  User       User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     Int
}

model Record {
  id         Int        @id @default(autoincrement())
  name       String
  path       String
  userId     Int
  keyboardId Int?
  size       Float      @default(0)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Keyboard   Keyboard?  @relation(fields: [keyboardId], references: [id])
  categories Category[] @relation("CategoryToRecord")
}

model Effect {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  isActive    Boolean @default(false)
  isPremium   Boolean @default(false)
  config      Json

  Keyboard   Keyboard? @relation(fields: [keyboardId], references: [id])
  keyboardId Int?
  Key        Key?      @relation(fields: [keyId], references: [id])
  keyId      Int?
}

model Design_keyboard {
  name      String     @id @unique
  path      String
  isPremium Boolean    @default(false)
  colors    Color[]
  keyboards Keyboard[]
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  user      User?      @relation(fields: [userId], references: [id])
  userId    Int?
  keys      Key[]      @relation("CategoryToKey")
  keyboards Keyboard[] @relation("CategoryToKeyboard")
  Record    Record[]   @relation("CategoryToRecord")
  Sound     Sound[]    @relation("CategoryToSound")
}

model Color {
  id              Int               @id @default(autoincrement())
  color           String            @unique
  Design_keyboard Design_keyboard[]
}

model User_info {
  id                Int                @unique()
  isAdmin           Boolean            @default(false)
  space             Float
  keyboards         Int
  sounds            Int
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  user              User               @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  membership_status Membership_status?
}

model Membership {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  description       String?
  keyboards         Int
  space             Float
  sounds            Int
  price             Float?
  duration          Int? // Duration in days, months, or years
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  membership_status Membership_status[]
}

model Membership_type {
  id       Int    @id @default(autoincrement())
  billed   String @unique
  discount Float
}

model Membership_status {
  id            Int        @id @default(autoincrement())
  start_date    DateTime   @default(now())
  end_date      DateTime?
  auto_renewal  Boolean    @default(false)
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  membership    Membership @relation(fields: [membership_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  membership_id Int
  user_info     User_info  @relation(fields: [user_infoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_infoId   Int        @unique
}
