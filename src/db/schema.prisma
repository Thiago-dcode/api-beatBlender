generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  username      String         @unique
  email         String?        @unique
  avatar        String?
  name          String?
  biography     String?
  isActive      Boolean        @default(true)
  isAdmin       Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  password      String
  token         String?
  sounds_folder Sound_folder[]
  keys          Key[]
  keyboards     Keyboard[]
  records       Record[]
  sounds        Sound[]
  user_info     User_info?
  // Membership_status Membership_status?
}

model Keyboard {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  private   Boolean  @default(false)

  keys              Key[]
  records           Record[]
  categories        Category[]       @relation("CategoryToKeyboard")
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            Int
  Design_keyboard   Design_keyboard? @relation(fields: [design_keyboardId], references: [id])
  design_keyboardId Int?
}

model Key {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  letter       String
  userId       Int
  keyboardId   Int?
  design_keyId Int?
  soundId      Int?
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Design_key   Design_key? @relation(fields: [design_keyId], references: [id])
  Keyboard     Keyboard?   @relation(fields: [keyboardId], references: [id])
  Sound        Sound?      @relation(fields: [soundId], references: [id])
  categories   Category[]  @relation("CategoryToKey")
}

model Sound {
  id             Int          @id @default(autoincrement())
  name           String
  path           String
  userId         Int
  size           Float        @default(0)
  keys           Key[]
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categories     Category[]   @relation("CategoryToSound")
  Sound_folder   Sound_folder @relation(fields: [sound_folderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sound_folderId Int
}

model Sound_folder {
  id         Int     @id @default(autoincrement())
  name       String
  is_default Boolean @default(false)
  sounds     Sound[]
  User       User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     Int
}

model Record {
  id         Int        @id @default(autoincrement())
  name       String
  path       String
  userId     Int
  keyboardId Int?
  size       Float      @default(0)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Keyboard   Keyboard?  @relation(fields: [keyboardId], references: [id])
  categories Category[] @relation("CategoryToRecord")
}

model Design_keyboard {
  id        Int        @id @default(autoincrement())
  name      String
  colors    Color[]
  keyboards Keyboard[]
}

model Design_key {
  id        Int     @id @default(autoincrement())
  name      String
  colors    Color[]
  keyboards Key[]
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String
  keys      Key[]      @relation("CategoryToKey")
  keyboards Keyboard[] @relation("CategoryToKeyboard")
  Record    Record[]   @relation("CategoryToRecord")
  Sound     Sound[]    @relation("CategoryToSound")
}

model Color {
  id                Int              @id @default(autoincrement())
  color             String
  design_keyboardId Int?
  design_keyId      Int?
  Design_key        Design_key?      @relation(fields: [design_keyId], references: [id])
  Design_keyboard   Design_keyboard? @relation(fields: [design_keyboardId], references: [id])
}

model User_info {
  id                Int                @unique()
  space             Float
  keyboards         Int
  sounds            Int
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  user              User               @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  membership_status Membership_status?
}

model Membership {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  description       String?
  keyboards         Int
  space             Float
  sounds            Int
  price             Float?
  duration          Int? // Duration in days, months, or years
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  membership_status Membership_status[]
}

model Membership_type {
  id       Int    @id @default(autoincrement())
  billed   String @unique
  discount Float
}

model Membership_status {
  id            Int        @id @default(autoincrement())
  start_date    DateTime   @default(now())
  end_date      DateTime?
  auto_renewal  Boolean    @default(false)
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  membership    Membership @relation(fields: [membership_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  membership_id Int        @unique
  user_info     User_info @relation(fields: [user_infoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_infoId   Int       @unique
}
